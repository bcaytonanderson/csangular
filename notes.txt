STAYING SHARP WITH ANGULAR

-ORGANIZING: SEPARATE DIRECTORIES FOR ALL
	-Best to have separate directories for Controllers, Filters, Services, and Directives.

	-In notes-index.html, there is a lot of repetition. The only unique code which exists is within the main-wrapper div. Same for users-index.html: only unique code is within main-wrapper.

	ROUTES
		-Now that index.html has a space to display a template, we need to define routes so those views will render.

		FOUR STEPS TO ROUTE HAPPINESS
			1. Using ngView
				-use ng-view attribute to tell where to render the templates

			2. Load ngRoute library
				-used to be part of the core library, but has been removed
				-<script src=". . ./angular-route.js"></script>

			3. Import ngRoute module
				-include ngRoute in app.js main module.

			4. Define routes
				-inside module.config we can user $routePRovider's methods to define routes:
					-.when(path, route); - adds new route definition to $route service

					-otherwise(params); - sets route def that will be used on route change when no other route def is matched

		-In first lesson, we set var app = angular.module. . . and then reused that variable often. THIS IS BAD PRACTICE. Should redeclare angular.module each time.

		-Need to have a backend to serve up the data for the app, such as Brackets, Node, or Rails (this lesson used Rails and put all levels of the app in one public folder).

		LOGIC
			-The $http service is how we make an async request to a server
				-.get() retrieves data
				-.post() creates new data
				-.put() updates existing data
				-.delete() destroys data

			-Routes can have templates AND controllers
				-2 ways to link controller to route:
					-Inline- define the controller in the route itself
					-Outside- use an outside controller (js/controllers)

			-What if we want to show a single note?
				-First, note is clicked.
				-Second, route changes.
				-Last, route loads in the view.

				-Need to give each note <a> an ng-href

				-Route Params: can pass parameters into the controller with $routeParams

			-Create Controller
				-Is going to need a method that the form can call to save a new note.

UNIT 2

	$scope
		-Directive Template
		-Using $scope within the controller instead of reference 'this' allows us a shorter, easier way to use the directive.

	$scope, $config object.
		-Directives, by default, inherit their parent's scope.
		-So if we use the <nw-card> element, its parent is the ng-view div.
			-So if we use the num varaible and increment it each time with the controller, the num gets updated each time and all cards displayed this way will have the end number listed in the title.

			-To prevent this, we need to isolate the scope in the controller by passing scope an empty object:
				scope: {}

			-However, doing this will ensure that the element will no longer have access to its parent's scope.

			-In order to tell a directive it might receive a variable and what to do with it, we need to configure it. Within the scope object, we declare the header and set it to "@":

				scope: {
					header: "@"
				}

			-There are 3 options when binding data to an isolate scope:
				- @, =, and & characters.

				- Using "=" instead of "@" uses a two-way binding, so if the var changes in one place.
					- Then, in our custom directive tag, we would not use the expression (brackets). Instead:

						<nw-card header="note.header"></nw-card>

			-With an isolate scope, our directive can now be used in multiple places.
				-We can use it to display our users using the same directive.
					-We could pass in different things for our users:
						<nw-card header={{user.name}} icon="user.image"></nw-card>

		-scope object vs $scope
			-The scope object is used to isolate a directive's scope.

			-$scope in the controller is used to set values/functions as properties on our scope object.

	-Link
		-What if we wanted to make it so that we could click on each card, and it would display the card description.

		-We can add some CSS to establish our description element as hidden, and some jQuery to toggle the style on and off on a click.
			-BUt where does the jQuery go?

			-Each directive has a link function which is run after the directive has been compiled and linked up. THis is the best spot to DOM manipulation or logic functionality for the directive.
				-Using link's element parameter, we don't need to search the entire dom for our target elements.

		-If we want our descriptions to be displayed with proper markdown, we can download the markdown.js library.

		-We can use ngBindHtml and $sce to tell angular to trust the markdown library.
			-$sce: Strict Contextual Escaping service tells Angular to trust the hmtl.